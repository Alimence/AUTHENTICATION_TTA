const DEFAULT_USERS = [
    { username: 'admin', password: 'admin123', role: 'admin' },
    { username: 'editor', password: 'editor123', role: 'editor' },
    { username: 'viewer', password: 'viewer123', role: 'viewer' }
];

const users = [...DEFAULT_USERS];

const saveCurrentUser = (userName, role) => {
    localStorage.setItem('currentUser', JSON.stringify({ userName, role }));
};

const getCurrentUser = () => {
    return JSON.parse(localStorage.getItem('currentUser'));
};

const clearCurrentUser = () => {
    localStorage.removeItem('currentUser');
};

document.addEventListener('DOMContentLoaded', () => {
    const savedUsers = JSON.parse(localStorage.getItem('users'));
    if (savedUsers) {
        users.length = 0;
        users.push(...savedUsers);
    }

    const currentUser = getCurrentUser();
    if (currentUser) {
        displayContent(currentUser.role);
    }
});

const loginForm = document.querySelector('#loginForm');

loginForm.addEventListener('submit', function (e) {
    e.preventDefault();

    const username = document.querySelector('#userName').value.trim();
    const password = document.querySelector('#password').value.trim();
    const errorContainer = document.querySelector('#errorMessage');
    const successContainer = document.querySelector('#successMessage');

    // Check for master admin login
    if (username === 'masterAdmin' && password === 'masterPassword123') {
        saveCurrentUser('admin', 'admin');
        displayContent('admin');
        return;
    }

    const user = users.find(user => user.username === username && user.password === password);
    if (user) {
        errorContainer.textContent = '';
        successContainer.textContent = `Welcome ${user.role}`;
        saveCurrentUser(user.username, user.role);
        displayContent(user.role);
    } else {
        errorContainer.textContent = 'Invalid username or password';
    }
});

function displayContent(role) {
    const loginContainer = document.querySelector('.login-container');
    loginContainer.style.display = 'none';

    const contentDiv = document.createElement('div');
    contentDiv.className = 'content';

    contentDiv.innerHTML = `<h2>Welcome ${role}</h2>`;

    if (role === 'admin') {
        const manageUsersButton = document.createElement('button');
        manageUsersButton.textContent = 'Manage Users';
        manageUsersButton.onclick = displayUserManagement;
        contentDiv.appendChild(manageUsersButton);
    } else if (role === 'editor') {
        contentDiv.innerHTML += `
            <button>View</button>
            <button>Edit</button>
            <button>Delete</button>
        `;
    } else if (role === 'viewer') {
        contentDiv.innerHTML += `
            <button>Edit</button>
            <button>View</button>
        `;
    }

    const logoutButton = document.createElement('button');
    logoutButton.textContent = 'Logout';
    logoutButton.classList.add('logout-button');
    logoutButton.addEventListener('click', logout);

    contentDiv.appendChild(logoutButton);
    document.body.appendChild(contentDiv);
}

const displayUserManagement = () => {
    let userManagementDiv = document.querySelector('.user-management');
    if (userManagementDiv) {
        userManagementDiv.remove();
    }

    userManagementDiv = document.createElement('div');
    userManagementDiv.className = 'user-management';

    userManagementDiv.innerHTML = '<h2>User Management</h2>';

    users.forEach((user, index) => {
        const userDiv = document.createElement('div');
        userDiv.classList.add('user-row');

        const usernameSpan = document.createElement('span');
        usernameSpan.textContent = user.username;

        const roleSelect = document.createElement('select');
        ['admin', 'editor', 'viewer'].forEach(roleOption => {
            const option = document.createElement('option');
            option.value = roleOption;
            option.textContent = roleOption.charAt(0).toUpperCase() + roleOption.slice(1);
            option.selected = user.role === roleOption;
            roleSelect.appendChild(option);
        });

        roleSelect.addEventListener('change', (event) => {
            const newRole = event.target.value;
            changeRole(index, newRole);
        });

        userDiv.appendChild(usernameSpan);
        userDiv.appendChild(roleSelect);
        userManagementDiv.appendChild(userDiv);
    });

    document.body.appendChild(userManagementDiv);
};

const changeRole = (index, newRole) => {
    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== 'admin') {
        alert('Only admins can change roles.');
        return;
    }

    const user = users[index];
    if (user.role === 'admin' && newRole !== 'admin') {
        alert('Cannot remove the admin role from the admin user.');
        return;
    }

    user.role = newRole;
    alert(`User ${user.username} role has been changed to ${newRole}`);
    localStorage.setItem('users', JSON.stringify(users));
};

const logout = () => {
    clearCurrentUser();
    location.reload();
};

const backupUsers = () => {
    localStorage.setItem('usersBackup', JSON.stringify(users));
    alert('Users have been backed up.');
};

const restoreUsersFromBackup = () => {
    const backup = JSON.parse(localStorage.getItem('usersBackup'));
    if (backup) {
        users.length = 0;
        users.push(...backup);
        localStorage.setItem('users', JSON.stringify(users));
        alert('Users have been restored from backup.');
        location.reload();
    } else {
        alert('No backup found.');
    }
};